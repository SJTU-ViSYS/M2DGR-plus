%YAML:1.0

#common parameters
imu_topic: "/camera/imu"
image_topic: "/camera/color/image_raw"
output_dir: "//home/car/Downloads/project/gvins_ws/src/GVINS/traj/m2dgrp/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1: 0.0
   k2: 0.0
   p1: 0.0
   p2: 0.0
projection_parameters:
   fx: 603.95556640625
   fy: 603.1257934570312
   cx: 324.0858154296875
   cy: 232.72303771972656


gnss_enable: 0
gnss_meas_topic: "/ublox_driver/range_meas"           # GNSS raw measurement topic
gnss_ephem_topic: "/ublox_driver/ephem"               # GPS, Galileo, BeiDou ephemeris
gnss_glo_ephem_topic: "/ublox_driver/glo_ephem"       # GLONASS ephemeris
gnss_iono_params_topic: "/ublox_driver/iono_params"   # GNSS broadcast ionospheric parameters
gnss_tp_info_topic: "/ublox_driver/time_pulse_info"   # PPS time info
gnss_elevation_thres: 30            # satellite elevation threshold (degree)
gnss_psr_std_thres: 2.0             # pseudo-range std threshold
gnss_dopp_std_thres: 2.0            # doppler std threshold
gnss_track_num_thres: 5            # number of satellite tracking epochs before entering estimator
gnss_ddt_sigma: 0.1

gnss_local_online_sync: 0                      # if perform online synchronization betwen GNSS and local time
local_trigger_info_topic: "/external_trigger"   # external trigger info of the local sensor, if `gnss_local_online_sync` is 1
gnss_local_time_diff: 18.0                      # difference between GNSS and local time (s), if `gnss_local_online_sync` is 0

gnss_iono_default_parameters: !!opencv-matrix
   rows: 1
   cols: 8
   dt: d
   data: [0.1118E-07,  0.2235E-07, -0.4172E-06,  0.6557E-06,
          0.1249E+06, -0.4424E+06,  0.1507E+07, -0.2621E+06]

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [1.0, -0.00, 0.00, 
          0.00, 1.0, 0.0, 
         -0.00, 0.00, 1.0]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.0, -0.00, -0.0]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 0                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 1.2374091609523514e-02        # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 3.0032654435730201e-03       # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 1.9218003442176448e-04        # accelerometer bias random work noise standard deviation.  #0.002
gyr_w: 5.4692100664858005e-05 
g_norm: 9.805       # gravity magnitude

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)
